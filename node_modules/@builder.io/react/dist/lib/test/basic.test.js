"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var server_1 = require("react-dom/server");
var react_1 = require("@testing-library/react");
var sdk_1 = require("@builder.io/sdk");
var builder_react_1 = require("../src/builder-react");
var render_block_1 = require("./functions/render-block");
sdk_1.builder.init('null');
require("@testing-library/jest-dom/extend-expect");
describe('Dummy test', function () {
    it('tests run correctly', function () {
        expect(true).toBeTruthy();
    });
});
var server = function (cb) {
    sdk_1.Builder.isServer = true;
    try {
        cb();
    }
    finally {
        sdk_1.Builder.isServer = false;
    }
};
describe('Renders tons of components', function () {
    var blocks = [
        render_block_1.block('Columns', {
            columns: [{ blocks: [render_block_1.el()] }, { blocks: [render_block_1.el()] }],
        }),
        render_block_1.block('CustomCode', {
            code: '<!-- hello -->',
        }),
        render_block_1.block('Embed', {
            content: '<!-- hello -->',
        }),
        render_block_1.block('Symbol'),
        render_block_1.block('Router'),
        render_block_1.block('Image', { image: 'foobar' }),
        render_block_1.block('Form:Form'),
        render_block_1.block('Video', { video: 'foobar' }),
        render_block_1.block('Button', { text: 'foobar' }),
        render_block_1.block('Section', null, { children: [render_block_1.el()] }),
        render_block_1.block('Form:SubmitButton', { text: 'foobar' }),
        render_block_1.block('Form:Input', { type: 'text' }),
        render_block_1.block('Form:Label'),
        render_block_1.block('Form:Select'),
        render_block_1.block('Form:TextArea', { placeholder: 'foobar' }),
        render_block_1.block('Raw:Img', { image: 'foobar' }),
    ];
    var getRenderExampleElement = function () { return (React.createElement(builder_react_1.BuilderPage, { model: "page", content: {
            data: {
                blocks: blocks,
            },
        } })); };
    it('works with dom', function () {
        var testApi = react_1.render(getRenderExampleElement());
    });
    it('works with SSR', function () {
        server_1.renderToString(getRenderExampleElement());
    });
});
describe('Data rendering', function () {
    var TEXT_STRING = 'Hello 1234';
    var bindingBlock = render_block_1.el({
        bindings: {
            'component.options.text': 'state.foo',
        },
        component: {
            name: 'Text',
        },
    });
    var getBindingExampleElement = function () { return (React.createElement(builder_react_1.BuilderPage, { model: "page", data: { foo: TEXT_STRING }, content: {
            data: {
                blocks: [bindingBlock],
            },
        } })); };
    it('works with dom', function () {
        var testApi = react_1.render(getBindingExampleElement());
        expect(testApi.getByText(TEXT_STRING)).toBeInTheDocument();
    });
    it('works with SSR', function () {
        server(function () {
            var renderedString = server_1.renderToString(getBindingExampleElement());
            expect(renderedString).toContain(TEXT_STRING);
        });
    });
});
describe('Content changes when new content provided', function () {
    var textA = 'textA';
    var textB = 'textB';
    var idA = 'id-a';
    var idB = 'id-b';
    it('Handles content passed and changed correctly', function () {
        var testApi = react_1.render(React.createElement(builder_react_1.BuilderPage, { model: "page", content: {
                id: idA,
                data: {
                    blocks: [render_block_1.block('Text', { text: textA })],
                },
            } }));
        expect(testApi.getByText(textA)).toBeInTheDocument();
        testApi.rerender(React.createElement(builder_react_1.BuilderPage, { model: "page", content: {
                id: idB,
                data: {
                    blocks: [render_block_1.block('Text', { text: textB })],
                },
            } }));
        expect(testApi.getByText(textB)).toBeInTheDocument();
    });
    it('Should be in controlled mode for null or underined content', function () {
        var testApi = react_1.render(React.createElement(builder_react_1.BuilderPage, { model: "page", content: undefined }));
        expect(testApi.queryByText(textB)).toBeNull();
        testApi.rerender(React.createElement(builder_react_1.BuilderPage, { model: "page", content: {
                id: idB,
                data: {
                    blocks: [render_block_1.block('Text', { text: textB })],
                },
            } }));
        expect(testApi.getByText(textB)).toBeInTheDocument();
    });
    it('Should be in controlled mode for null or underined content', function () {
        var testApi = react_1.render(React.createElement(builder_react_1.BuilderPage, { model: "page" }));
        expect(testApi.queryByText(textB)).toBeNull();
        testApi.rerender(React.createElement(builder_react_1.BuilderPage, { model: "page", content: {
                id: idB,
                data: {
                    blocks: [render_block_1.block('Text', { text: textB })],
                },
            } }));
        expect(testApi.getByText(textB)).toBeInTheDocument();
    });
});
//# sourceMappingURL=basic.test.js.map